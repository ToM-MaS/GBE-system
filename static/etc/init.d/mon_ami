#!/bin/sh
### BEGIN INIT INFO
# Provides:          mon_ami 
# Required-Start:    $remote_fs $syslog freeswitch gemeinschaft-runtime-init
# Required-Stop:     $remote_fs $syslog freeswitch
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: MonAMI Asterisk Manger Interface Emulator
# Description:
#
### END INIT INFO

# Author: Julian Pawlowski <jp@jps-networks.eu>
# Copryright: AMOOMA GmbH 2013

# Do NOT "set -e"

# General settings
[ -f /etc/gemeinschaft/system.conf ] && . /etc/gemeinschaft/system.conf || echo "FATAL ERROR: Local configuration file in /etc/gemeinschaft/system.conf missing"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="MonAMI Asterisk Manger Interface Emulator"
NAME=mon_ami
DAEMON=${GS_DIR_NORMALIZED}/misc/$NAME/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER="$NAME"

[ x"${GS_ENV}" = x"production" ] && DAEMON_ARGS="--log-file=/var/log/$NAME/$NAME.log" || DAEMON_ARGS="--log-file=/var/log/$NAME/$NAME.log --log-level=2"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Enforce root rights
#
if [ `id -u` -ne 0 ]; then
	echo "ERROR: `basename $0` needs to be run as root. Aborting ..."
	exit 1
fi

if ! [ -x $DAEMON ] ; then
	echo "ERROR: $DAEMON not found"
	exit 1
fi

#
# Function that starts the daemon/service
#
do_start()
{
		start-stop-daemon --start --pidfile $PIDFILE --startas $DAEMON -c $USER --make-pidfile --background -- \
                $DAEMON_ARGS \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
		start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/KILL/5 --pidfile $PIDFILE
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return 0
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
        ;;
  status)
       status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
		sleep 2
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
